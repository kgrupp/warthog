/*
 * Copyright (c) 2011-2014, Andreas J. Kuebler & Christoph Zengler & Rouven Walter & Konstantin Grupp
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.warthog.pl.optimization.apreferredmcs

import org.warthog.pl.decisionprocedures.satsolver.{ Model, Solver }
import org.warthog.pl.datastructures.cnf.{ PLLiteral, MutablePLClause, ImmutablePLClause }
import org.warthog.generic.formulas.Formula
import org.warthog.pl.formulas.{ PLAtom, PL }
import org.warthog.pl.optimization.maxsat.MaxSATHelper
import org.warthog.pl.generators.pbc.PBCtoSAT
import org.warthog.generic.datastructures.cnf.ClauseLike
import scala.util.control.Breaks.{ break, breakable }

/**
 * Linear Search algorithm for A-preferred MCS.
 *
 * @author Konstantin Grupp
 */
class LinearSearchModelExploiting(satSolver: Solver, useBackbone:Boolean = false) extends SATBasedAPreferredMCSSolver(satSolver) {

  override def name = {
    var b = ""
    if (useBackbone) b = "-backbone"
    "LinearSearchModelExploiting"+b
  }

  override protected def solveImpl(softClauses: List[ClauseLike[PL, PLLiteral]]): Set[ClauseLike[PL, PLLiteral]] = {
    var delta: Set[ClauseLike[PL, PLLiteral]] = Set()
    val softClausesAry = softClauses.toArray
    var i = 0
    while (i < softClausesAry.size) {
      Thread.sleep(0) // to handle interrupts
      val clause = softClausesAry(i)
      satSolver.mark()
      var gamma: Set[ClauseLike[PL, PLLiteral]] = Set()
      if (mySat(clause)) {

        gamma += clause

        // restricted model exploiting start
        var myModelMap:Map[PLAtom,Boolean] = Map()
        breakable {
          for (j <- i + 1 to softClausesAry.size - 1) {
            Thread.sleep(1) // to handle interrupts
            val checkClause = softClausesAry(j)
            var clauseIsTrue = false
            breakable {
              for (lit <- checkClause.literals) {
                var phaseOpt = satSolver.getVarState(lit.variable)
                if (phaseOpt.isEmpty) {
                  phaseOpt = myModelMap.get(lit.variable)
                  if (phaseOpt.isEmpty) {
                    // if variable undefined then assign it the right way
                    myModelMap += (lit.variable -> lit.phase)
                    clauseIsTrue = true
                    break
                  }
                }
                

                if (phaseOpt.isDefined && phaseOpt.get == lit.phase) {
                  clauseIsTrue = true
                  break
                }
              }
            }
            if (clauseIsTrue) {
              gamma += checkClause
              i = j
            } else {
              break
            }
          }
        }
        // restricted model exploiting end
      } else {
        delta += clause
        if (useBackbone) {
          for (lit <- clause.literals) {
            satSolver.add(new ImmutablePLClause(lit.negate))
          }
        }
      }
      satSolver.undo()
      gamma.foreach(satSolver.add)
      i += 1
    }
    delta
  }

  private def mySat(clause: ClauseLike[PL, PLLiteral]): Boolean = {
    satSolver.add(clause)
    val isSAT = satSolver.sat() == Solver.SAT
    isSAT
  }

}
