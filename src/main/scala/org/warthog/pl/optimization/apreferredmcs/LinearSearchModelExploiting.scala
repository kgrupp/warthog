/*
 * Copyright (c) 2011-2014, Andreas J. Kuebler & Christoph Zengler & Rouven Walter & Konstantin Grupp
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.warthog.pl.optimization.apreferredmcs

import org.warthog.pl.decisionprocedures.satsolver.{ Model, Solver }
import org.warthog.pl.datastructures.cnf.{ PLLiteral, MutablePLClause, ImmutablePLClause }
import org.warthog.generic.formulas.Formula
import org.warthog.pl.formulas.{ PLAtom, PL }
import org.warthog.pl.optimization.maxsat.MaxSATHelper
import org.warthog.pl.generators.pbc.PBCtoSAT
import org.warthog.generic.datastructures.cnf.ClauseLike
import scala.util.control.Breaks.{ break, breakable }
import org.warthog.pl.optimization.apreferredmcs.impl.ModelExploiting
import org.warthog.pl.optimization.apreferredmcs.impl.TimeUsed

/**
 * Linear Search algorithm with model exploiting for A-preferred MCS
 * 
 * Note: Optional there backbone literals can be activated
 *
 * @author Konstantin Grupp
 */
class LinearSearchModelExploiting(satSolver: Solver, useBackbone: Boolean = false) extends SATBasedAPreferredMCSSolver(satSolver) {

  override def name = {
    var b = ""
    if (useBackbone) b = "-backbone"
    "LinearSearchModelExploiting" + b
  }

  override protected def solveImpl(softClauses: List[ClauseLike[PL, PLLiteral]]) = {
    var delta: List[Int] = List()
    val softClausesAry = softClauses.toArray
    var i = 0
    val modelExploiting = new ModelExploiting(satSolver)
    while (i < softClausesAry.size) {
      Thread.sleep(0) // to handle interrupts
      val clause = softClausesAry(i)
      satSolver.mark()
      var gamma: List[ClauseLike[PL, PLLiteral]] = List()
      if (mySat(clause)) {

        // restricted model exploiting start
        breakable {
          var j = i + 1
          while (j < softClausesAry.size) {
            Thread.sleep(0) // to handle interrupts
            val checkClause = softClausesAry(j)
            if (modelExploiting.isSat(checkClause)) {
              satSolver.addHard(checkClause)
              j += 1
            } else {
              i = j - 1
              break
            }
          }
        }
        // restricted model exploiting end
        
        tUsatDel.start
        satSolver.forgetLastMark()
        tUsatDel.end
      } else {
        tUsatDel.start
        satSolver.undo
        tUsatDel.end
        delta = i :: delta
        if (useBackbone) {
          for (lit <- clause.literals) {
            satSolver.addHard(new ImmutablePLClause(lit.negate))
          }
        }
      }
      i += 1
    }
    delta.reverse
  }

  private def mySat(clause: ClauseLike[PL, PLLiteral]): Boolean = {
    tUsatAdd.start
    satSolver.add(clause)
    tUsatAdd.end
    tUsat.start
    val isSAT = satSolver.sat() == Solver.SAT
    tUsat.end
    isSAT
  }

}
